{"ast":null,"code":"export const GetUserDetail = async () => {\n  let json = {};\n  try {\n    debugger;\n    const response = await fetch('http://localhost:3001/api/auth/verifytoken', {\n      method: \"GET\",\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.status == '400') {\n      throw new Error(`Response status: ${response.status}`);\n    }\n    json = await response.json();\n  } catch (error) {\n    json = {\n      message: error.message\n    };\n  }\n  return json;\n};\n_c = GetUserDetail;\nvar _c;\n$RefreshReg$(_c, \"GetUserDetail\");","map":{"version":3,"names":["GetUserDetail","json","response","fetch","method","credentials","headers","status","Error","error","message","_c","$RefreshReg$"],"sources":["/Users/vikashjoshi/noteflect-app/note-flect-app/frontend/src/components/common/User_Detail.js"],"sourcesContent":["export const GetUserDetail=async()=>{\n    let json ={}\n    try {\n        debugger;\n        const response = await fetch('http://localhost:3001/api/auth/verifytoken', {\n          method: \"GET\",\n          credentials:'include',\n          headers: {\n            'Content-Type': 'application/json',\n          },  \n        });\n  \n        if (response.status=='400') {\n          throw new Error(`Response status: ${response.status}`);\n        }\n        json = await response.json();\n        \n      } catch (error) {\n       json={message:error.message};\n      }\n      return json;\n}"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAC,MAAAA,CAAA,KAAS;EAChC,IAAIC,IAAI,GAAE,CAAC,CAAC;EACZ,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,KAAK;MACbC,WAAW,EAAC,SAAS;MACrBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAIJ,QAAQ,CAACK,MAAM,IAAE,KAAK,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAAC,oBAAoBN,QAAQ,CAACK,MAAM,EAAE,CAAC;IACxD;IACAN,IAAI,GAAG,MAAMC,QAAQ,CAACD,IAAI,CAAC,CAAC;EAE9B,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACfR,IAAI,GAAC;MAACS,OAAO,EAACD,KAAK,CAACC;IAAO,CAAC;EAC7B;EACA,OAAOT,IAAI;AACjB,CAAC;AAAAU,EAAA,GArBYX,aAAa;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}