{"ast":null,"code":"var _jsxFileName = \"/Users/vikashjoshi/noteflect-app/note-flect-app/frontend/src/components/common/draft-editor/draft_editor.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*import React,{useState} from 'react';\nimport { Editor, RichUtils } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { ChromePicker } from 'react-color'; // Import color picker\n\n\n// StyleButton component to handle Bold, Italic, and Heading options\nfunction StyleButton({ label, onToggle, styles,design  }) {\n  const styleMap = {\n    'RED': { color: 'red' },\n    'GREEN': { color: 'green' },\n    'BLUE': { color: 'blue' },\n    'ORANGE': { color: 'orange' },\n  };\n\n  return (\n    <button className='btn'\n      onMouseDown={(e) => {\n        e.preventDefault();\n        onToggle(styles);\n      }}\n      style={{ marginRight: '10px',design }}\n    >\n      {label}\n    </button>\n  );\n}\nconst defaultColorMap = {\n  'RED': { color: 'red' },\n  'GREEN': { color: 'green' },\n  'BLUE': { color: 'blue' },\n  'ORANGE': { color: 'orange' },\n};\n\nfunction TextEditor({ editorState, onEditorChange }) {\n\n  const [color, setColor] = useState('black'); // Default color\n  const [showColorPicker, setShowColorPicker] = useState(false); // Toggle color picker visibility\n  const [EditorText, SetEditorText] = useState(false); // Toggle color picker visibility\n\n  const OnchangeText=()=>{\n    SetEditorText(EditorText);\n    onEditorChange(editorState)\n  }\n  // Handle text color change\n  const handleColorChange = (color) => {\n    const newColor = color.hex.toUpperCase(); // Convert color to uppercase\n    setColor(newColor);\n    const newState = RichUtils.toggleInlineStyle(editorState, newColor);\n    onEditorChange(newState);\n    setShowColorPicker(!showColorPicker)\n  };\n\n  // Define color map including custom color\n  const styleMap = {\n    ...defaultColorMap,\n    [color]: { color: color },\n  };\n  // Handle inline styles (bold, italic)\n  const handleInlineStyle = (style) => {\n    onEditorChange(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  // Handle block styles (headings)\n  const handleBlockStyle = (blockType) => {\n    onEditorChange(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  //const handleColorChange = (color) => {\n    //const newState = RichUtils.toggleInlineStyle(editorState, color);\n   // onEditorChange(newState);\n // };\n\n  return (\n    <div style={{backgroundColor:'white'}}>*/\n{/* Toolbar for formatting options */}\n/* <div style={{ marginBottom: '10px' }}>*/\n{/* Bold Button */}\n/*#__PURE__*/_jsxDEV(StyleButton, {\n  label: \"Bold\",\n  onToggle: handleInlineStyle,\n  styles: \"BOLD\",\n  style: {\n    FontWeight: '900'\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 79,\n  columnNumber: 9\n}, this);\n{/* Italic Button */}\n/*#__PURE__*/_jsxDEV(StyleButton, {\n  label: \"Italic\",\n  onToggle: handleInlineStyle,\n  styles: \"ITALIC\",\n  style: {\n    FontStyle: 'italic'\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 81,\n  columnNumber: 9\n}, this);\n{/* Heading Button */}\n/*  <StyleButton label=\"H1\" onToggle={handleBlockStyle} styles=\"header-one\" />\n  <StyleButton label=\"H2\" onToggle={handleBlockStyle} styles=\"header-two\" />\n  <StyleButton label=\"H3\" onToggle={handleBlockStyle} styles=\"header-three\" />\n  <StyleButton label=\"H4\" onToggle={handleBlockStyle} styles=\"header-four\" />\n  <StyleButton label=\"Red\" onToggle={handleColorChange} styles=\"RED\" />\n  <StyleButton label=\"Green\" onToggle={handleColorChange} styles=\"GREEN\" />\n  <StyleButton label=\"Blue\" onToggle={handleColorChange} styles=\"BLUE\" />\n  <StyleButton label=\"Orange\" onToggle={handleColorChange} styles=\"ORANGE\" />\n  <button\n    onClick={() => setShowColorPicker(!showColorPicker)}\n    style={{ marginRight: '10px' }}\n  >\n    Pick Color\n  </button>\n{showColorPicker && (\n    <ChromePicker\n      color={color}\n      onChangeComplete={handleColorChange}\n    />\n  )}\n </div>\n  <div style={{ border: '1px solid #ccc', padding: '10px', minHeight: '200px' }}>\n  <Editor\n    editorState={EditorText}\n    onChange={OnchangeText}\n    placeholder=\"Start typing your text...\"\n  />\n</div>\n</div>\n);\n}\nexport default TextEditor;\n*/","map":{"version":3,"names":["_jsxDEV","StyleButton","label","onToggle","handleInlineStyle","styles","style","FontWeight","fileName","_jsxFileName","lineNumber","columnNumber","FontStyle"],"sources":["/Users/vikashjoshi/noteflect-app/note-flect-app/frontend/src/components/common/draft-editor/draft_editor.js"],"sourcesContent":["/*import React,{useState} from 'react';\nimport { Editor, RichUtils } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { ChromePicker } from 'react-color'; // Import color picker\n\n\n// StyleButton component to handle Bold, Italic, and Heading options\nfunction StyleButton({ label, onToggle, styles,design  }) {\n  const styleMap = {\n    'RED': { color: 'red' },\n    'GREEN': { color: 'green' },\n    'BLUE': { color: 'blue' },\n    'ORANGE': { color: 'orange' },\n  };\n\n  return (\n    <button className='btn'\n      onMouseDown={(e) => {\n        e.preventDefault();\n        onToggle(styles);\n      }}\n      style={{ marginRight: '10px',design }}\n    >\n      {label}\n    </button>\n  );\n}\nconst defaultColorMap = {\n  'RED': { color: 'red' },\n  'GREEN': { color: 'green' },\n  'BLUE': { color: 'blue' },\n  'ORANGE': { color: 'orange' },\n};\n\nfunction TextEditor({ editorState, onEditorChange }) {\n\n  const [color, setColor] = useState('black'); // Default color\n  const [showColorPicker, setShowColorPicker] = useState(false); // Toggle color picker visibility\n  const [EditorText, SetEditorText] = useState(false); // Toggle color picker visibility\n\n  const OnchangeText=()=>{\n    SetEditorText(EditorText);\n    onEditorChange(editorState)\n  }\n  // Handle text color change\n  const handleColorChange = (color) => {\n    const newColor = color.hex.toUpperCase(); // Convert color to uppercase\n    setColor(newColor);\n    const newState = RichUtils.toggleInlineStyle(editorState, newColor);\n    onEditorChange(newState);\n    setShowColorPicker(!showColorPicker)\n  };\n\n  // Define color map including custom color\n  const styleMap = {\n    ...defaultColorMap,\n    [color]: { color: color },\n  };\n  // Handle inline styles (bold, italic)\n  const handleInlineStyle = (style) => {\n    onEditorChange(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  // Handle block styles (headings)\n  const handleBlockStyle = (blockType) => {\n    onEditorChange(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  //const handleColorChange = (color) => {\n    //const newState = RichUtils.toggleInlineStyle(editorState, color);\n   // onEditorChange(newState);\n // };\n\n  return (\n    <div style={{backgroundColor:'white'}}>*/\n      {/* Toolbar for formatting options */}\n     /* <div style={{ marginBottom: '10px' }}>*/\n        {/* Bold Button */}\n        <StyleButton label=\"Bold\" onToggle={handleInlineStyle} styles=\"BOLD\" style={{FontWeight:'900'}}  />\n        {/* Italic Button */}\n        <StyleButton label=\"Italic\" onToggle={handleInlineStyle} styles=\"ITALIC\" style={{FontStyle:'italic'}} />\n        {/* Heading Button */}\n      /*  <StyleButton label=\"H1\" onToggle={handleBlockStyle} styles=\"header-one\" />\n        <StyleButton label=\"H2\" onToggle={handleBlockStyle} styles=\"header-two\" />\n        <StyleButton label=\"H3\" onToggle={handleBlockStyle} styles=\"header-three\" />\n        <StyleButton label=\"H4\" onToggle={handleBlockStyle} styles=\"header-four\" />\n        <StyleButton label=\"Red\" onToggle={handleColorChange} styles=\"RED\" />\n        <StyleButton label=\"Green\" onToggle={handleColorChange} styles=\"GREEN\" />\n        <StyleButton label=\"Blue\" onToggle={handleColorChange} styles=\"BLUE\" />\n        <StyleButton label=\"Orange\" onToggle={handleColorChange} styles=\"ORANGE\" />\n        <button\n          onClick={() => setShowColorPicker(!showColorPicker)}\n          style={{ marginRight: '10px' }}\n        >\n          Pick Color\n        </button>\n    {showColorPicker && (\n          <ChromePicker\n            color={color}\n            onChangeComplete={handleColorChange}\n          />\n        )}\n\n      </div>\n\n\n      <div style={{ border: '1px solid #ccc', padding: '10px', minHeight: '200px' }}>\n        <Editor\n          editorState={EditorText}\n          onChange={OnchangeText}\n          placeholder=\"Start typing your text...\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TextEditor;\n*/\n  "],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC;AACF;AACG,CAAC;AACD,aAAAA,OAAA,CAACC,WAAW;EAACC,KAAK,EAAC,MAAM;EAACC,QAAQ,EAAEC,iBAAkB;EAACC,MAAM,EAAC,MAAM;EAACC,KAAK,EAAE;IAACC,UAAU,EAAC;EAAK;AAAE;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAG,CAAC;AACnG,CAAC;AACD,aAAAX,OAAA,CAACC,WAAW;EAACC,KAAK,EAAC,QAAQ;EAACC,QAAQ,EAAEC,iBAAkB;EAACC,MAAM,EAAC,QAAQ;EAACC,KAAK,EAAE;IAACM,SAAS,EAAC;EAAQ;AAAE;EAAAJ,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC;AACxG,CAAC;AACH;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}