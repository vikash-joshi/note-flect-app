{"ast":null,"code":"var _jsxFileName = \"/Users/vikashjoshi/noteflect-app/note-flect-app/frontend/src/components/common/controls/quill-editor/quill-editor.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomTinyMCEEditor = ({\n  onEditorChange\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  useEffect(() => {\n    // Function to handle voice-to-text conversion\n    const handleVoiceToText = () => {\n      if ('webkitSpeechRecognition' in window) {\n        const recognition = new window.webkitSpeechRecognition();\n        recognition.continuous = false;\n        recognition.interimResults = false;\n        recognition.lang = 'en-US';\n        recognition.onstart = () => {\n          console.log('Voice recognition started. Speak into the microphone.');\n        };\n        recognition.onresult = event => {\n          const transcript = event.results[0][0].transcript;\n          if (editorRef.current) {\n            const editor = editorRef.current;\n            editor.execCommand('mceInsertContent', false, transcript);\n            onEditorChange(editor.getContent());\n          }\n        };\n        recognition.onerror = event => {\n          console.error('Error occurred in recognition: ' + event.error);\n        };\n        recognition.onend = () => {\n          console.log('Voice recognition ended.');\n        };\n        recognition.start();\n      } else {\n        console.error('Speech recognition not supported in this browser.');\n      }\n    };\n\n    // Ensure the custom button is added when editor is initialized\n    const editor = editorRef.current;\n    if (editor) {\n      editor.ui.registry.addButton('voiceToText', {\n        text: 'Voice to Text',\n        onAction: handleVoiceToText\n      });\n    }\n  }, [onEditorChange]);\n  return /*#__PURE__*/_jsxDEV(Editor, {\n    apiKey: \"54gnpttiqcpxauq7f5m7e306osmh1v3m08hpezcy2q4fxxx2\",\n    onInit: (evt, editor) => {\n      editorRef.current = editor;\n      editor.ui.registry.addButton('voiceToText', {\n        text: 'Voice to Text',\n        onAction: () => {\n          if ('webkitSpeechRecognition' in window) {\n            const recognition = new window.webkitSpeechRecognition();\n            recognition.continuous = false;\n            recognition.interimResults = false;\n            recognition.lang = 'en-US';\n            recognition.onstart = () => {\n              console.log('Voice recognition started. Speak into the microphone.');\n            };\n            recognition.onresult = event => {\n              const transcript = event.results[0][0].transcript;\n              if (editorRef.current) {\n                const editor = editorRef.current;\n                editor.execCommand('mceInsertContent', false, transcript);\n                onEditorChange(editor.getContent());\n              }\n            };\n            recognition.onerror = event => {\n              console.error('Error occurred in recognition: ' + event.error);\n            };\n            recognition.onend = () => {\n              console.log('Voice recognition ended.');\n            };\n            recognition.start();\n          } else {\n            console.error('Speech recognition not supported in this browser.');\n          }\n        }\n      });\n    },\n    initialValue: \"<p>This is the initial content of the editor.</p>\",\n    init: {\n      height: 250,\n      menubar: false,\n      plugins: ['advlist autolink lists link image charmap print preview anchor', 'searchreplace visualblocks code fullscreen', 'insertdatetime media table paste code help wordcount'],\n      toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | voiceToText',\n      setup: editor => {\n        editor.on('Change', () => {\n          onEditorChange(editor.getContent());\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomTinyMCEEditor, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = CustomTinyMCEEditor;\nexport default CustomTinyMCEEditor;\nvar _c;\n$RefreshReg$(_c, \"CustomTinyMCEEditor\");","map":{"version":3,"names":["React","useRef","useEffect","Editor","jsxDEV","_jsxDEV","CustomTinyMCEEditor","onEditorChange","_s","editorRef","handleVoiceToText","window","recognition","webkitSpeechRecognition","continuous","interimResults","lang","onstart","console","log","onresult","event","transcript","results","current","editor","execCommand","getContent","onerror","error","onend","start","ui","registry","addButton","text","onAction","apiKey","onInit","evt","initialValue","init","height","menubar","plugins","toolbar","setup","on","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vikashjoshi/noteflect-app/note-flect-app/frontend/src/components/common/controls/quill-editor/quill-editor.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n\nconst CustomTinyMCEEditor = ({ onEditorChange }) => {\n  const editorRef = useRef(null);\n\n  useEffect(() => {\n    // Function to handle voice-to-text conversion\n    const handleVoiceToText = () => {\n      if ('webkitSpeechRecognition' in window) {\n        const recognition = new window.webkitSpeechRecognition();\n        recognition.continuous = false;\n        recognition.interimResults = false;\n        recognition.lang = 'en-US';\n\n        recognition.onstart = () => {\n          console.log('Voice recognition started. Speak into the microphone.');\n        };\n\n        recognition.onresult = (event) => {\n          const transcript = event.results[0][0].transcript;\n          if (editorRef.current) {\n            const editor = editorRef.current;\n            editor.execCommand('mceInsertContent', false, transcript);\n            onEditorChange(editor.getContent());\n          }\n        };\n\n        recognition.onerror = (event) => {\n          console.error('Error occurred in recognition: ' + event.error);\n        };\n\n        recognition.onend = () => {\n          console.log('Voice recognition ended.');\n        };\n\n        recognition.start();\n      } else {\n        console.error('Speech recognition not supported in this browser.');\n      }\n    };\n\n    // Ensure the custom button is added when editor is initialized\n    const editor = editorRef.current;\n    if (editor) {\n      editor.ui.registry.addButton('voiceToText', {\n        text: 'Voice to Text',\n        onAction: handleVoiceToText,\n      });\n    }\n  }, [onEditorChange]);\n\n  return (\n    <Editor\n      apiKey='54gnpttiqcpxauq7f5m7e306osmh1v3m08hpezcy2q4fxxx2'\n      onInit={(evt, editor) => {\n        editorRef.current = editor;\n        editor.ui.registry.addButton('voiceToText', {\n          text: 'Voice to Text',\n          onAction: () => {\n            if ('webkitSpeechRecognition' in window) {\n              const recognition = new window.webkitSpeechRecognition();\n              recognition.continuous = false;\n              recognition.interimResults = false;\n              recognition.lang = 'en-US';\n\n              recognition.onstart = () => {\n                console.log('Voice recognition started. Speak into the microphone.');\n              };\n\n              recognition.onresult = (event) => {\n                const transcript = event.results[0][0].transcript;\n                if (editorRef.current) {\n                  const editor = editorRef.current;\n                  editor.execCommand('mceInsertContent', false, transcript);\n                  onEditorChange(editor.getContent());\n                }\n              };\n\n              recognition.onerror = (event) => {\n                console.error('Error occurred in recognition: ' + event.error);\n              };\n\n              recognition.onend = () => {\n                console.log('Voice recognition ended.');\n              };\n\n              recognition.start();\n            } else {\n              console.error('Speech recognition not supported in this browser.');\n            }\n          },\n        });\n      }}\n      initialValue=\"<p>This is the initial content of the editor.</p>\"\n      init={{\n        height: 250,\n        menubar: false,\n        plugins: [\n          'advlist autolink lists link image charmap print preview anchor',\n          'searchreplace visualblocks code fullscreen',\n          'insertdatetime media table paste code help wordcount',\n        ],\n        toolbar:\n          'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | voiceToText',\n        setup: (editor) => {\n          editor.on('Change', () => {\n            onEditorChange(editor.getContent());\n          });\n        },\n      }}\n    />\n  );\n};\n\nexport default CustomTinyMCEEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}