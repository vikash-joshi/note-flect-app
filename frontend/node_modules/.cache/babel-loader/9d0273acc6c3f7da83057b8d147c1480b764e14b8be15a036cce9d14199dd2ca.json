{"ast":null,"code":"const fetchallUsers = async () => {\n  try {\n    const response = await fetch(`http://localhost:3001/api/Admin/getUsers`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    return json;\n  } catch (err) {\n    return {\n      messsage: err.message\n    };\n  }\n};\nconst fetchEmailLogs = async () => {\n  try {\n    const response = await fetch(`http://localhost:3001/api/Admin/GetEmailLogs`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    return json;\n  } catch (err) {\n    return {\n      messsage: err.message\n    };\n  }\n};\nconst fetchRequestList = async () => {\n  try {\n    const response = await fetch(`http://localhost:3001/api/User/GetRequestList`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    return json;\n  } catch (err) {\n    return {\n      messsage: err.message\n    };\n  }\n};\nconst CreateUser = async (User, Methods) => {\n  try {\n    const response = await fetch(\"http://localhost:3001/api/Admin/\" + Methods, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: User === null || User === void 0 ? void 0 : User.name,\n        email: User === null || User === void 0 ? void 0 : User.email,\n        Gender: User === null || User === void 0 ? void 0 : User.gender,\n        UserType: User === null || User === void 0 ? void 0 : User.UserType,\n        IsAccountLocked: User === null || User === void 0 ? void 0 : User.IsAccountLocked,\n        IsEmailVerified: User === null || User === void 0 ? void 0 : User.IsEmailVerified,\n        UserType: User === null || User === void 0 ? void 0 : User.UserType,\n        _id: User === null || User === void 0 ? void 0 : User._id\n      })\n    });\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n_c = CreateUser;\nconst SendMailLog = async MailBody => {\n  try {\n    const response = await fetch(\"http://localhost:3001/api/Admin/SendMail\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        FromEmail: MailBody.FromEmail,\n        ToEmail: MailBody.ToEmail,\n        Subject: MailBody.Subject,\n        Body: MailBody.Body,\n        User: MailBody.UserId\n      })\n    });\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n_c2 = SendMailLog;\nmodule.exports = {\n  fetchallUsers,\n  SendMailLog,\n  CreateUser,\n  fetchEmailLogs\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"CreateUser\");\n$RefreshReg$(_c2, \"SendMailLog\");","map":{"version":3,"names":["fetchallUsers","response","fetch","method","credentials","headers","json","err","messsage","message","fetchEmailLogs","fetchRequestList","CreateUser","User","Methods","body","JSON","stringify","name","email","Gender","gender","UserType","IsAccountLocked","IsEmailVerified","_id","error","console","_c","SendMailLog","MailBody","FromEmail","ToEmail","Subject","Body","UserId","_c2","module","exports","$RefreshReg$"],"sources":["/Users/vikashjoshi/noteflect-app/note-flect-app/frontend/src/components/admin/Manage/admin_methods.js"],"sourcesContent":["\nconst fetchallUsers=async()=>{\n    try {\n        const response = await fetch(`http://localhost:3001/api/Admin/getUsers`, {\n          method: \"GET\",\n          credentials: \"include\",\n          headers: { \"Content-Type\": \"application/json\" }\n        });\n\n        const json = await response.json();\n        return json;\n      } catch (err) {\n    return   { messsage:err.message}\n    }\n}\n\n\nconst fetchEmailLogs=async()=>{\n  try {\n      const response = await fetch(`http://localhost:3001/api/Admin/GetEmailLogs`, {\n        method: \"GET\",\n        credentials: \"include\",\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n\n      const json = await response.json();\n      return json;\n    } catch (err) {\n  return   { messsage:err.message}\n  }\n}\n\nconst fetchRequestList=async()=>{\n  try {\n      const response = await fetch(`http://localhost:3001/api/User/GetRequestList`, {\n        method: \"GET\",\n        credentials: \"include\",\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n\n      const json = await response.json();\n      return json;\n    } catch (err) {\n  return   { messsage:err.message}\n  }\n}\n\n\n\nconst CreateUser=async(User,Methods)=>{\n  try {\n    const response = await fetch(\"http://localhost:3001/api/Admin/\"+Methods, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: User?.name,\n        email: User?.email,\n        Gender: User?.gender,\n        UserType: User?.UserType,\n        IsAccountLocked: User?.IsAccountLocked,\n        IsEmailVerified: User?.IsEmailVerified,\n        \n        UserType:User?.UserType,\n        _id: User?._id\n      })\n    });\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nconst SendMailLog =async(MailBody)=>{\n  try {\n    const response = await fetch(\"http://localhost:3001/api/Admin/SendMail\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        FromEmail:MailBody.FromEmail,\n        ToEmail:MailBody.ToEmail,\n        Subject:MailBody.Subject,\n        Body:MailBody.Body,\n        User:MailBody.UserId\n      })\n    });\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nmodule.exports={fetchallUsers,SendMailLog,CreateUser,fetchEmailLogs}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}