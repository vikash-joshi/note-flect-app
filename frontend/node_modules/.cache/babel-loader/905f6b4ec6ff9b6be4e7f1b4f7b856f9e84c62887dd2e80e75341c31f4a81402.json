{"ast":null,"code":"var _jsxFileName = \"/Users/vikashjoshi/noteflect-app/note-flect-app/frontend/src/components/common/draft-editor/draft_editor.js\",\n  _s = $RefreshSig$();\n/*import React,{useState} from 'react';\nimport { Editor, RichUtils } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { ChromePicker } from 'react-color'; // Import color picker\n\n\n// StyleButton component to handle Bold, Italic, and Heading options\nfunction StyleButton({ label, onToggle, styles,design  }) {\n  const styleMap = {\n    'RED': { color: 'red' },\n    'GREEN': { color: 'green' },\n    'BLUE': { color: 'blue' },\n    'ORANGE': { color: 'orange' },\n  };\n\n  return (\n    <button className='btn'\n      onMouseDown={(e) => {\n        e.preventDefault();\n        onToggle(styles);\n      }}\n      style={{ marginRight: '10px',design }}\n    >\n      {label}\n    </button>\n  );\n}\nconst defaultColorMap = {\n  'RED': { color: 'red' },\n  'GREEN': { color: 'green' },\n  'BLUE': { color: 'blue' },\n  'ORANGE': { color: 'orange' },\n};\n\nfunction TextEditor({ editorState, onEditorChange }) {\n\n  const [color, setColor] = useState('black'); // Default color\n  const [showColorPicker, setShowColorPicker] = useState(false); // Toggle color picker visibility\n  const [EditorText, SetEditorText] = useState(false); // Toggle color picker visibility\n\n  const OnchangeText=()=>{\n    SetEditorText(EditorText);\n    onEditorChange(editorState)\n  }\n  // Handle text color change\n  const handleColorChange = (color) => {\n    const newColor = color.hex.toUpperCase(); // Convert color to uppercase\n    setColor(newColor);\n    const newState = RichUtils.toggleInlineStyle(editorState, newColor);\n    onEditorChange(newState);\n    setShowColorPicker(!showColorPicker)\n  };\n\n  // Define color map including custom color\n  const styleMap = {\n    ...defaultColorMap,\n    [color]: { color: color },\n  };\n  // Handle inline styles (bold, italic)\n  const handleInlineStyle = (style) => {\n    onEditorChange(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  // Handle block styles (headings)\n  const handleBlockStyle = (blockType) => {\n    onEditorChange(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  //const handleColorChange = (color) => {\n    //const newState = RichUtils.toggleInlineStyle(editorState, color);\n   // onEditorChange(newState);\n // };\n\n  return (\n    <div style={{backgroundColor:'white'}}>*/\n{/* Toolbar for formatting options */}\n/* <div style={{ marginBottom: '10px' }}>*/\n{/* Bold Button */}\n// <StyleButton label=\"Bold\" onToggle={handleInlineStyle} styles=\"BOLD\" style={{FontWeight:'900'}}  />\n{/* Italic Button */}\n/*#__PURE__*/_jsxDEV(StyleButton, {\n  label: \"Italic\",\n  onToggle: handleInlineStyle,\n  styles: \"ITALIC\",\n  style: {\n    FontStyle: 'italic'\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 81,\n  columnNumber: 9\n}, this);\n{/* Heading Button */}\n/*  <StyleButton label=\"H1\" onToggle={handleBlockStyle} styles=\"header-one\" />\n  <StyleButton label=\"H2\" onToggle={handleBlockStyle} styles=\"header-two\" />\n  <StyleButton label=\"H3\" onToggle={handleBlockStyle} styles=\"header-three\" />\n  <StyleButton label=\"H4\" onToggle={handleBlockStyle} styles=\"header-four\" />\n  <StyleButton label=\"Red\" onToggle={handleColorChange} styles=\"RED\" />\n  <StyleButton label=\"Green\" onToggle={handleColorChange} styles=\"GREEN\" />\n  <StyleButton label=\"Blue\" onToggle={handleColorChange} styles=\"BLUE\" />\n  <StyleButton label=\"Orange\" onToggle={handleColorChange} styles=\"ORANGE\" />\n  <button\n    onClick={() => setShowColorPicker(!showColorPicker)}\n    style={{ marginRight: '10px' }}\n  >\n    Pick Color\n  </button>\n{showColorPicker && (\n    <ChromePicker\n      color={color}\n      onChangeComplete={handleColorChange}\n    />\n  )}\n </div>\n  <div style={{ border: '1px solid #ccc', padding: '10px', minHeight: '200px' }}>\n  <Editor\n    editorState={EditorText}\n    onChange={OnchangeText}\n    placeholder=\"Start typing your text...\"\n  />\n</div>\n</div>\n);\n}\nexport default TextEditor;\n*/\nimport React, { useState } from 'react';\nimport { Editor, EditorState, RichUtils, Modifier } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { ChromePicker } from 'react-color';\n\n// Define default color map\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultColorMap = {\n  RED: {\n    color: 'red'\n  },\n  GREEN: {\n    color: 'green'\n  },\n  BLUE: {\n    color: 'blue'\n  },\n  ORANGE: {\n    color: 'orange'\n  }\n};\nfunction TextEditor({\n  editorState,\n  onEditorChange\n}) {\n  _s();\n  const [color, setColor] = useState('#000000'); // Default color\n  const [showColorPicker, setShowColorPicker] = useState(false); // Toggle color picker visibility\n\n  // Handle text color change\n  const handleColorChange = newColor => {\n    const selectedColor = `color-${newColor.hex}`.toUpperCase(); // Create unique inline style\n    setColor(newColor.hex);\n    applyColor(selectedColor);\n  };\n\n  // Apply the selected color to the editor state\n  const applyColor = color => {\n    const selection = editorState.getSelection();\n    const contentState = editorState.getCurrentContent();\n    const newContentState = Modifier.applyInlineStyle(contentState, selection, color);\n    onEditorChange(EditorState.push(editorState, newContentState, 'change-inline-style'));\n  };\n\n  // Handle inline style toggle (such as bold, italic)\n  const handleKeyCommand = command => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      onEditorChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  // Define style map, including the dynamic color selected\n  const styleMap = {\n    ...defaultColorMap,\n    [`COLOR-${color.toUpperCase()}`]: {\n      color: color\n    } // Map dynamic color to custom style\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowColorPicker(!showColorPicker),\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Pick Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), showColorPicker && /*#__PURE__*/_jsxDEV(ChromePicker, {\n        color: color,\n        onChangeComplete: handleColorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '10px',\n        minHeight: '200px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        editorState: editorState,\n        onChange: onEditorChange,\n        handleKeyCommand: handleKeyCommand // Handle keyboard commands\n        ,\n        customStyleMap: styleMap // Apply custom style map\n        ,\n        placeholder: \"Start typing your text...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n_s(TextEditor, \"mMxEZ1wg8ROk0kCzJlGwK2/zq+s=\");\n_c = TextEditor;\nexport default TextEditor;\nvar _c;\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"names":["_jsxDEV","StyleButton","label","onToggle","handleInlineStyle","styles","style","FontStyle","fileName","_jsxFileName","lineNumber","columnNumber","React","useState","Editor","EditorState","RichUtils","Modifier","ChromePicker","jsxDEV","defaultColorMap","RED","color","GREEN","BLUE","ORANGE","TextEditor","editorState","onEditorChange","_s","setColor","showColorPicker","setShowColorPicker","handleColorChange","newColor","selectedColor","hex","toUpperCase","applyColor","selection","getSelection","contentState","getCurrentContent","newContentState","applyInlineStyle","push","handleKeyCommand","command","newState","styleMap","children","marginBottom","onClick","marginRight","onChangeComplete","border","padding","minHeight","onChange","customStyleMap","placeholder","_c","$RefreshReg$"],"sources":["/Users/vikashjoshi/noteflect-app/note-flect-app/frontend/src/components/common/draft-editor/draft_editor.js"],"sourcesContent":["/*import React,{useState} from 'react';\nimport { Editor, RichUtils } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { ChromePicker } from 'react-color'; // Import color picker\n\n\n// StyleButton component to handle Bold, Italic, and Heading options\nfunction StyleButton({ label, onToggle, styles,design  }) {\n  const styleMap = {\n    'RED': { color: 'red' },\n    'GREEN': { color: 'green' },\n    'BLUE': { color: 'blue' },\n    'ORANGE': { color: 'orange' },\n  };\n\n  return (\n    <button className='btn'\n      onMouseDown={(e) => {\n        e.preventDefault();\n        onToggle(styles);\n      }}\n      style={{ marginRight: '10px',design }}\n    >\n      {label}\n    </button>\n  );\n}\nconst defaultColorMap = {\n  'RED': { color: 'red' },\n  'GREEN': { color: 'green' },\n  'BLUE': { color: 'blue' },\n  'ORANGE': { color: 'orange' },\n};\n\nfunction TextEditor({ editorState, onEditorChange }) {\n\n  const [color, setColor] = useState('black'); // Default color\n  const [showColorPicker, setShowColorPicker] = useState(false); // Toggle color picker visibility\n  const [EditorText, SetEditorText] = useState(false); // Toggle color picker visibility\n\n  const OnchangeText=()=>{\n    SetEditorText(EditorText);\n    onEditorChange(editorState)\n  }\n  // Handle text color change\n  const handleColorChange = (color) => {\n    const newColor = color.hex.toUpperCase(); // Convert color to uppercase\n    setColor(newColor);\n    const newState = RichUtils.toggleInlineStyle(editorState, newColor);\n    onEditorChange(newState);\n    setShowColorPicker(!showColorPicker)\n  };\n\n  // Define color map including custom color\n  const styleMap = {\n    ...defaultColorMap,\n    [color]: { color: color },\n  };\n  // Handle inline styles (bold, italic)\n  const handleInlineStyle = (style) => {\n    onEditorChange(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  // Handle block styles (headings)\n  const handleBlockStyle = (blockType) => {\n    onEditorChange(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  //const handleColorChange = (color) => {\n    //const newState = RichUtils.toggleInlineStyle(editorState, color);\n   // onEditorChange(newState);\n // };\n\n  return (\n    <div style={{backgroundColor:'white'}}>*/\n      {/* Toolbar for formatting options */}\n     /* <div style={{ marginBottom: '10px' }}>*/\n        {/* Bold Button */}\n       // <StyleButton label=\"Bold\" onToggle={handleInlineStyle} styles=\"BOLD\" style={{FontWeight:'900'}}  />\n        {/* Italic Button */}\n        <StyleButton label=\"Italic\" onToggle={handleInlineStyle} styles=\"ITALIC\" style={{FontStyle:'italic'}} />\n        {/* Heading Button */}\n      /*  <StyleButton label=\"H1\" onToggle={handleBlockStyle} styles=\"header-one\" />\n        <StyleButton label=\"H2\" onToggle={handleBlockStyle} styles=\"header-two\" />\n        <StyleButton label=\"H3\" onToggle={handleBlockStyle} styles=\"header-three\" />\n        <StyleButton label=\"H4\" onToggle={handleBlockStyle} styles=\"header-four\" />\n        <StyleButton label=\"Red\" onToggle={handleColorChange} styles=\"RED\" />\n        <StyleButton label=\"Green\" onToggle={handleColorChange} styles=\"GREEN\" />\n        <StyleButton label=\"Blue\" onToggle={handleColorChange} styles=\"BLUE\" />\n        <StyleButton label=\"Orange\" onToggle={handleColorChange} styles=\"ORANGE\" />\n        <button\n          onClick={() => setShowColorPicker(!showColorPicker)}\n          style={{ marginRight: '10px' }}\n        >\n          Pick Color\n        </button>\n    {showColorPicker && (\n          <ChromePicker\n            color={color}\n            onChangeComplete={handleColorChange}\n          />\n        )}\n\n      </div>\n\n\n      <div style={{ border: '1px solid #ccc', padding: '10px', minHeight: '200px' }}>\n        <Editor\n          editorState={EditorText}\n          onChange={OnchangeText}\n          placeholder=\"Start typing your text...\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TextEditor;\n*/\nimport React, { useState } from 'react';\nimport { Editor, EditorState, RichUtils, Modifier } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { ChromePicker } from 'react-color';\n\n// Define default color map\nconst defaultColorMap = {\n  RED: { color: 'red' },\n  GREEN: { color: 'green' },\n  BLUE: { color: 'blue' },\n  ORANGE: { color: 'orange' },\n};\n\nfunction TextEditor({ editorState, onEditorChange }) {\n  const [color, setColor] = useState('#000000'); // Default color\n  const [showColorPicker, setShowColorPicker] = useState(false); // Toggle color picker visibility\n\n  // Handle text color change\n  const handleColorChange = (newColor) => {\n    const selectedColor = `color-${newColor.hex}`.toUpperCase(); // Create unique inline style\n    setColor(newColor.hex);\n    applyColor(selectedColor);\n  };\n\n  // Apply the selected color to the editor state\n  const applyColor = (color) => {\n    const selection = editorState.getSelection();\n    const contentState = editorState.getCurrentContent();\n    const newContentState = Modifier.applyInlineStyle(contentState, selection, color);\n    onEditorChange(EditorState.push(editorState, newContentState, 'change-inline-style'));\n  };\n\n  // Handle inline style toggle (such as bold, italic)\n  const handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      onEditorChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  // Define style map, including the dynamic color selected\n  const styleMap = {\n    ...defaultColorMap,\n    [`COLOR-${color.toUpperCase()}`]: { color: color }, // Map dynamic color to custom style\n  };\n\n  return (\n    <div>\n      {/* Toolbar for formatting options */}\n      <div style={{ marginBottom: '10px' }}>\n        {/* Color Picker Button */}\n        <button\n          onClick={() => setShowColorPicker(!showColorPicker)}\n          style={{ marginRight: '10px' }}\n        >\n          Pick Color\n        </button>\n        {/* Conditional rendering of color picker */}\n        {showColorPicker && (\n          <ChromePicker\n            color={color}\n            onChangeComplete={handleColorChange}\n          />\n        )}\n      </div>\n\n      {/* Draft.js Editor */}\n      <div style={{ border: '1px solid #ccc', padding: '10px', minHeight: '200px' }}>\n        <Editor\n          editorState={editorState}\n          onChange={onEditorChange}\n          handleKeyCommand={handleKeyCommand} // Handle keyboard commands\n          customStyleMap={styleMap} // Apply custom style map\n          placeholder=\"Start typing your text...\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TextEditor;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC;AACF;AACG,CAAC;AACF;AACC,CAAC;AACD,aAAAA,OAAA,CAACC,WAAW;EAACC,KAAK,EAAC,QAAQ;EAACC,QAAQ,EAAEC,iBAAkB;EAACC,MAAM,EAAC,QAAQ;EAACC,KAAK,EAAE;IAACC,SAAS,EAAC;EAAQ;AAAE;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC;AACxG,CAAC;AACH;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,EAAEC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,UAAU;AACnE,OAAO,yBAAyB;AAChC,SAASC,YAAY,QAAQ,aAAa;;AAE1C;AAAA,SAAAC,MAAA,IAAAnB,OAAA;AACA,MAAMoB,eAAe,GAAG;EACtBC,GAAG,EAAE;IAAEC,KAAK,EAAE;EAAM,CAAC;EACrBC,KAAK,EAAE;IAAED,KAAK,EAAE;EAAQ,CAAC;EACzBE,IAAI,EAAE;IAAEF,KAAK,EAAE;EAAO,CAAC;EACvBG,MAAM,EAAE;IAAEH,KAAK,EAAE;EAAS;AAC5B,CAAC;AAED,SAASI,UAAUA,CAAC;EAAEC,WAAW;EAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}